(in-package :http-routes.test)

(in-suite :http-routes.parser)

(test (parse-route-test :compile-at :definition-time)
  (is-true (equalp (http-routes.parser:parse-route "/orders") '("/orders")))
  (is-true (equalp (http-routes.parser:parse-route "*path") '(&rest :path)))
  (is-true (equalp (http-routes.parser:parse-route "/orders/:order-id") '("/orders/" :order-id)))
  (is-true (equalp (http-routes.parser:parse-route "/orders/:order-id/type") '("/orders/" :order-id "/type")))
  (is-true (equalp (http-routes.parser:parse-route "/control(/*path)") '("/control" (&optional "/" &rest :path))))
  (is-true (equalp (http-routes.parser:parse-route "/do/movers(/:mover-id)(/:tab)(/:sub-id)(/*rest)") '("/do/movers" (&optional "/" :mover-id)
                                                                                                        (&optional "/" :tab)
                                                                                                        (&optional "/" :sub-id)
                                                                                                        (&optional "/" &rest :rest))))
  (is-true (equalp (http-routes.parser:parse-route "/blog/*path") '("/blog/" &rest :path)))
  (is-true (equalp (http-routes.parser:parse-route "/client(/)*path") '("/client" (&optional "/") &rest :path)))
  (is-true (equalp (http-routes.parser:parse-route "/client(/)(*path)") '("/client" (&optional "/") (&optional &rest :path))))
  (is-true (equalp (http-routes.parser:parse-route "/forum/:|topic-title|-:topic-id") '("/forum/" :topic-title "-" :topic-id)))
  (is-true (equalp (http-routes.parser:parse-route"/somewhat/(id)*sw(/)*rest") '("/somewhat/" (&optional "id") &rest :sw (&optional "/") &rest :rest))))

(test (route-variables-test :compile-at :definition-time)
  (flet ((route-variables% (string)
           (http-routes.parser:route-variables (http-routes.parser:parse-route string))))
    (is-true (equalp (route-variables% "/orders") '()))
    (is-true (equalp (route-variables% "/orders/:order-id") '((:order-id . :segment))))
    (is-true (equalp (route-variables% "/orders/:order-id/type") '((:order-id . :segment))))
    (is-true (equalp (route-variables% "/control(/*path)") '((:path . :multi-segment))))
    (is-true (equalp (route-variables% "/do/movers(/:mover-id)(/:tab)(/:sub-id)(/*rest)") '((:mover-id . :segment)
                                                                                            (:tab . :segment)
                                                                                            (:sub-id . :segment)
                                                                                            (:rest . :multi-segment))))
    (is-true (equalp (route-variables% "/blog/*path") '((:path . :multi-segment))))
    (is-true (equalp (route-variables% "/client(/)*path") '((:path . :multi-segment))))))

(test (route-to-match-rules-test :compile-at :definition-time)
  (flet ((route-to-match-rules% (route)
           (http-routes.parser:route-to-match-rules (http-routes.parser:parse-route route))))
    (is-true (equalp (route-to-match-rules% "/orders") '(("/orders"))))
    (is-true (equalp (route-to-match-rules% "/orders/:order-id") '(("/orders/" :order-id))))
    (is-true (equalp (route-to-match-rules% "/orders/:order-id/type") '(("/orders/" :order-id "/type"))))
    (is-true (equalp (route-to-match-rules% "/control(/*path)") '(("/control") ("/control" "/" :path))))
    (is-true (equalp (route-to-match-rules% "/blog/*path") '(("/blog/" :path))))
    (is-true (equalp (route-to-match-rules% "/do/movers(/:mover-id)(/:tab)(/:sub-id)(/*rest)")
                     `(("/do/movers")
                       ("/do/movers" "/" :mover-id)
                       ("/do/movers" "/" :mover-id "/" :tab)
                       ("/do/movers" "/" :mover-id "/" :tab "/" :sub-id)
                       ("/do/movers" "/" :mover-id "/" :tab "/" :sub-id "/" :rest))))
    (is-true (equalp (route-to-match-rules% "/orders/(id):order-id") '(("/orders/" :order-id)
                                                                       ("/orders/" "id" :order-id))))
    (is-true (equalp (route-to-match-rules% "/somewhat/(id)*sw(/)*rest")
                     `(("/somewhat/" :sw :rest)
                       ("/somewhat/" "id" :sw :rest)
                       ("/somewhat/" "id" :sw "/" :rest))))))
